# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  #image: megha171/acquiacli:v1
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
    - echo "Building version $VERSION ..."
    - ls -l /
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      when: never

    #- acli --version

manual-job1:
  stage: build
  script:
    - echo "Manual job starts running.."
    - echo "Manual job ends"
  when: manual
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      

scheduled_job:
  script:
    - echo "This job is scheduled to run at a specific time"
  only:
    - schedules
  variables:
    CRON_STRATEGY: "*/5 * * * *"
    SCHEDULED_JOB_ENABLED: "true"

job1:
  stage: build
  script:
  - chmod +x scripts/job1.sh
  - ./scripts/job1.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'


job2:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
  script:
    - echo "job2 is running only code pushed from dev branch."
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      

job4:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - echo "job 4 is running because pull reqeuest created"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
     
job5:
  stage: build
  rules:
    - if : '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_TITLE =~ /Merge branch.*/
      when: on_success    
  script:
    - echo "job 5 is running because pull reqeuest merged"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      
job3:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - echo "job3 is running only code pushed from main branch"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      
unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      
lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      when: never
deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed into production env."
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $SCHEDULED_JOB_ENABLED != "true"'
      